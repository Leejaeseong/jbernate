<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util">

	<!-- 설정파일 경로 지정 -->
	<context:property-placeholder location="classpath:/property/*.properties" />

	<!-- 컨트롤러만 빼고 로딩함 : 컨트롤러는 Servlet-dispatcher(mvc-config.xml)에서 설정 -->
    <context:component-scan base-package="com.jbernate" >
		<context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation" />
	</context:component-scan>
    
	<!-- 트랜잭션을 annotation 기반으로 제어가능, 즉 클래스와 메소드에 @Transactional 사용 가능  -->
	<tx:annotation-driven />
	
	<!-- ////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- 데이터 베이스 //////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////////////////////////////////////////////////////////////////// -->
	
	<!-- Datasource : DB 접속 설정 -->
	<!--  
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@192.168.56.101:1521:XE" />
		<property name="username" value="MN" />
		<property name="password" value="1234" />
	</bean>
	-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${db_driver_class_nm}" />
		<property name="url" value="${db_url}" />
		<property name="username" value="${db_user_nm}" />
		<property name="password" value="${db_user_pw}" />
	</bean>
	
	<!-- Hibernate -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.jbernate" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>	<!-- DB 종류 설정( database.properties 파일 참고 ) -->
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!--  
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.registerColumnType" />
				-->

				<!--  
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				-->
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				
				<!-- Hibernate 구성 프로퍼티들
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.dialect	 		     	|특정 관계형 데이터베이스에 최적화 된 SQL을 생성시키는 것을 Hibernate에게 허용해주는 Hibernate Dialect의 클래스명.
				| 								 	| 예. full.classname.of.Dialect
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.show_sql	 		 	| 모든 SQL 문장들을 콘솔에 기록한다. 이것은 로그 카테고리 org.hibernate.SQL를 debug로 설정하는 것에 대한 하나의 다른 방법이다.
				| 								 	| 예. true | false
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.format_sql	 		 	| 로그와 콘솔 속에 SQL을 깔끔하게 프린트한다.
				|								 	| 예. true | false
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.default_schema	 	 	| 생성된 SQL 내에 주어진 schema/tablespace로서 수식이 없는 테이블이름들을 수식한다.
				| 								 	| 예. SCHEMA_NAME
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.default_catalog	 	 	| 주어진 SQL 내에 주어진 카타록으로서 수식이 없는 테이블이름들을 수식한다.
				| 								 	| 예. CATALOG_NAME
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.session_factory_name 	| SessionFactory는 그것이 생성된 후에 JNDI 내에서 이 이름에 자동적으로 바인드 될 것이다.
				| 								 	| 예. jndi/composite/name
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.max_fetch_depth	 	 	| single-ended 연관관계들(one-to-one, many-to-one)의 경우에 outer join fetch 트리의 최대 "깊이"를 설정한다. 0은 디폴트 outer join fetching을 사용불가능하게 만든다.
				| 								 	| 예. 0과 3 사이의 값들이권장된다
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.default_batch_fetch_size| 연관들의 Hibernate 배치 페칭에 대한 디폴트 크기를 설정한다.
				| 									| 예. 권장되는 값들은 4, 8, 16
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.default_entity_mode		| 이 SessionFactory로부터 열려진 모든 세션들에 대해 엔티티 표현을 디폴트 모드로 설정한다
				| 									| dynamic-map, dom4j, pojo
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.order_updates        	| 업데이트 중인 항목들의 프라이머리 키 값에 의해 SQL 업데이트들이 순서(ordering)지워지도록 Hibernate에게 강제시킨다. 이것은 고도의 동시성 시스템들에서 더 적은 트랜잭션 데드락(deadlock)들로 귀결될 것이다
				| 									| 예. true | false
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.generate_statistics		| 이용 가능하게 되면, Hibernate는 퍼포먼스 튜닝에 유용한 통계들을 수집할 것이다.
				| 									| 예. true | false
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.use_identifer_rollback	| 이용 가능하게 되면, 객체가 삭제될 때 생성된 식별자 프로퍼티들은 디폴트 값들로 재설정될 것이다.
				| 									| 예. true | false
				+===================================+=======================================================================================================================================================================================================+
				| hibernate.use_sql_comments	 	| 이용 가능하게 되면, Hibernate는 보다 쉬운 디버깅을 위해 SQL 내에 주석들을 생성시킬 것이다. 디폴트는 false.
				| 									| 예. true | false
				+===================================+=======================================================================================================================================================================================================+
				
				Hibernate JDBC 및 커넥션 프로퍼티들
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.jdbc.fetch_size	 			  | 0 아닌 값은 JDBC fetch 사이즈를 결정한다(Statement.setFetchSize()을 호출한다 ).
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.jdbc.batch_size	 			  | 0 아닌 값은 Hibernate에 의한 JDBC2 배치 업데이트의 사용을 이용 가능하게 한다.
				| 										  | 예. 5와 30 사이의 값들이 권장된다
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.jdbc.batch_versioned_data	  | 당신의 JDBC 드라이버가 executeBatch()로부터 정확한 행 카운트들을 반환할 경우에 이 프로퍼티를 true로 설정하라(대개 이 옵션을 사용 가능하게 하는 것이 안전하다). 그러면 Hibernate는 자동적으로 버전화 된 데이터에 대해 배치화된(batched) DML을 사용할 것이다. 디폴트는 false.
				| 										  | 예. true | false
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.jdbc.factory_class	 		  | 맞춤형 Batcher를 선택한다. 대부분의 어플리케이션들은 이 구성 프로퍼티를 필요로 하지 않을 것이다.
				| 										  | 예. classname.of.Batcher
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.jdbc.use_scrollable_resultset | Hibernate에 의한 JDBC2 스크롤 가능한 결과셋들의 사용을 가능하게 해준다. 이 프로퍼티는 사용자가 제공한 JDBC커넥션들을 사용할 때에만 필수적이고, 그 밖의 경우 Hibernate는 커넥션 메타데이터를 사용한다.
				| 										  | 예. true | false
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.jdbc.use_streams_for_binary	  | binary 또는 serializable 타입들을 JDBC로 기록하고 /JDBC로부터 binary 또는 serializable 타입들을 읽어들일 때 스트림들을 사용한다(시스템-레벨 프로퍼티).
				| 										  | 예. true | false
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.jdbc.use_get_generated_keys	  | insert 후에 고유하게 생성된 키들을 검색하는데 JDBC3 PreparedStatement.getGeneratedKeys()의 사용을 이용 가능하도록 만든다. JDBC3+ 드라이버와 JRE1.4+를 필요로 하고, 당신의 드라이버가 Hibernate 식별자 생성자들에 문제가 있을 경우에 false로 설정하라. 디폴트로 커넥션 메타 데이터를 사용하여 드라이버 가용성들을 결정하려고 시도하라.
				| 									      | 예. true|false
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.connection.provider_class	  | Hibernate에 JDBC 커넥션들을 제공하는 맞춤형 ConnectionProvider의 클래스명.
				| 										  | 예. classname.of.ConnectionProvider
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.connection.isolation	 	  | JDBC transaction isolation 레벨을 설정한다. 의미있는 값들로 java.sql.Connection을 체크하지만 대부분의 데이터베이스들이 모든 격리(isolate) 레벨들을 지원하지 않음을 노트하라.
				| 										  | 예. 1, 2, 4, 8
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.connection.autocommit	 	  | JDBC 풀링된 커넥션들에 대해 자동커밋을 이용 가능하도록 한다(권장되지 않음).
				| 										  | 예. true | false
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.connection.release_mode	 	  | Hibernate가 JDBC 커넥션들을 해제하게 될 시점을 지정한다. 디폴트로 한 개의 JDBC 커넥션은 그 세션이 명시적으로 닫히거나 연결해제되기 전까지 보관된다. 어플리케이션 트랜잭션 서버 JTA 데이터소스의 경우, 당신은 모든 JDBC 호출 후에 커넥션들을 과감하게 해제시키기 위해 after_statement를 사용해야 한다. 비-JTA 연결의 경우, after_transaction을 사용하여 각각의 트랜잭션의 끝에서 커넥션들을 해제시키는 것이 종종 의미가 있다. auto는 JTA 및 CMT 트랜잭션 방도들의 경우에 after_statement를 선택하고 JDBC 트랜잭션 방도에 대해 after_transaction를 선택할 것이다.
				| 										  | eg. on_close (디폴트) | after_transaction | after_statement | auto
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.connection.<propertyName>	  | JDBC 프로퍼티 propertyName을 DriverManager.getConnection()에 전달한다.
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.jndi.<propertyName>			  | propertyName 프로퍼티를 JNDI InitialContextFactory에 전달한다.
				+=========================================+=================================================================================================================================================================================================+
				
				Hibernate Cache 프로퍼티들
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.cache.provider_class	 	  | 맞춤형 CacheProvider의 클래스명.
				| 										  | 예. classname.of.CacheProvider
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.cache.use_minimal_puts	 	  | 읽기가 매우 빈번한 경우에, 쓰기를 최소화 시키기 위해 second-level 캐시 연산을 최적화 시킨다. 이 설정은 Hibernate3에서 클러스터링 된 캐시들에 가장 유용하고, Hibernate3에서는 클러스터링된 캐시 구현들에 대해 디폴트로 이용 가능하다.
				| 										  | 예. true|false
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.cache.use_query_cache	 	  | 질의 캐시를 가능하게 만든다. 개별 질의들은 여전히 캐시 가능한 것으로 설정되어야 한다.
				| 										  | 예. true|false
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.cache.use_second_level_cache  | second-level 캐시를 완전히 사용 불가능하게 하는데 사용될 수 있고, 그것은 <cache> 매핑을 지정하는 클래스들에 대해 디폴트로 이용 가능이다.
				| 										  | 예. true|false
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.cache.query_cache_factory	  | 맞춤형 QueryCache 인터페이스의 클래스명. 디폴트는 미리 빌드된 StandardQueryCache.
				| 									      | 예. classname.of.QueryCache
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.cache.region_prefix	 		  | second-level 캐시 영역 이름들에 사용할 접두어.
				| 										  | 예. prefix
				+=========================================+=================================================================================================================================================================================================+
				| hibernate.cache.use_structured_entries  | 인간에게 보다 더 친숙한 형식으로 second-level 캐시 속에 데이터를 저장하도록 Hibernate에게 강제시킨다..
				| 									      | 예. true|false
				+=========================================+=================================================================================================================================================================================================+
				
				Hibernate 트랜잭션 프로퍼티들
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.transaction.factory_class	  	 	| Hibernate Transaction API 에 사용할 TransactionFactory의 클래스 이름.(디폴트는 JDBCTransactionFactory).
				| 										  	 	| 예. classname.of.TransactionFactory
				+===============================================+===========================================================================================================================================================================================+
				| jta.UserTransaction	 				  	 	| 어플리케이션 서버로부터 JTA UserTransaction을 얻기 위해 JTATransactionFactory에 의해 사용되는 JNDI 이름.
				| 										  	 	| 예. jndi/composite/name
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.transaction.manager_lookup_class 	| TransactionManagerLookup의 클래스명- JVM 레벨의 캐싱이 이용 가능할 때 또는 JTA 환경에서 hilo generator를 사용할 때 필요하다.
				| 											 	| 예. classname.of.TransactionManagerLookup
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.transaction.flush_before_completion	| 만일 사용가능하도록 되면, 세션은 트랜잭션의 before completion 단계 동안에 자동적으로 flush 될 것이다. 빌드되어 있는 자동적인 세션 컨텍스트 관리가 선호
				| 												| 예. true | false
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.transaction.auto_close_session	 	| 만일 사용가능토록 하면, after completion 단계 동안에 세션이 자동적으로 닫혀질 것이다. (CMT에 대해 Hibernate를 사용할 때 매우 유용하다.)
				| 												| 예. true | false
				+===============================================+===========================================================================================================================================================================================+
				
				여러가지 프로퍼티들
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.current_session_context_class		| "현재" Session의 영역화를 위한 하나의 (맞춤) 방도를 공급한다.
				| 												| 예. jta | thread | custom.Class
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.query.factory_class	 				| Chooses the HQL 파서 구현을 선택한다.
				| 												| 예. org.hibernate.hql.ast.ASTQueryTranslatorFactory 또는 org.hibernate.hql.classic.ClassicQueryTranslatorFactory
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.query.substitutions	 				| Hibernate 질의들 내의 토큰들로부터 SQL 토큰들로의 매핑(예를 들어 토큰들은 함수 이름 또는 리터럴 이름일 수 있다).
				| 												| 예. hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.hbm2ddl.auto						| SessionFactory가 생성될 때 스키마 DDL을 데이터베이스로 자동적으로 유효성 검사하거나 내보내기 한다. create-drop의 경우, SessionFactory가 명시적으로 닫혀질 때,, 데이터베이스 스키마가 드롭될 것이다.
				| 												| 예. validate | update | create | create-drop
				+===============================================+===========================================================================================================================================================================================+
				| hibernate.cglib.use_reflection_optimizer	 	| 런타임 reflection 대신에 CGLIB의 사용을 가능하도록 만든다(시스템 레벨 프로퍼티). Reflection은 문제가 발생할 시에 때때로 유용할 수 있고, 당신이 optimizer를 사용하지 않을 경우조차도 Hibernate는 항상 필요로 함을 유의하라. 당신은 hibernate.cfg.xml 속에 이 프로퍼티를 설정할수 없다.
				| 												| 예. true | false
				+===============================================+===========================================================================================================================================================================================+
				 -->
			</props>
		</property>
	</bean>

</beans>