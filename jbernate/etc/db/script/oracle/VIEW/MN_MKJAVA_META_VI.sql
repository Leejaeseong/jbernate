CREATE OR REPLACE VIEW MN_MKJAVA_META_VI
AS
/* 
  하이버네이트 자바 객체 만들기 위해 테이블/컬럼 정보 추출
  
  1. PK는 SEQ 하나만 존재
  2. B->A<-C 의 1:1관계는 안됨( A가 메인이고, 1:1로 B와 C가 있으면 안됨 )
   
*/
SELECT 
    COL.OWNER               AS DB_NM            --// DB명 AS DB_NM[ ex. CM ]
  , COL.TABLE_NAME          AS TAB_NM           --// 테이블명 AS TAB_NM[ ex. CM_USERMENU_MAP ]
  , TCM.COMMENTS            AS TAB_DESC         --// 테이블설명 AS TAB_DESC
  , COL.COLUMN_NAME         AS COL_NM           --// 컬럼명 AS COL_NM
  , CCM.COMMENTS            AS COL_DESC         --// 컬럼설명 AS COL_DESC
  , COL.DATA_TYPE           AS COL_TYPE         --// 컬럼타입 AS COL_TYPE : 대문자
  , COL.DATA_LENGTH         AS COL_LEN          --// 컬럼크기 AS COL_LEN
  , COL.DATA_PRECISION      AS COL_PREC         --// 컬럼PRECISION AS COL_PREC[ ex. 16 ]
  , COL.DATA_SCALE          AS COL_SCALE        --// 컬럼SCALE AS COL_SCALE[ ex. 0  ]
  , COL.NULLABLE            AS COL_NULL         --// 컬럼NULLABLE AS COL_NULL : Y or N
  , COL.COLUMN_ID           AS COL_SEQ          --// 컬럼순서 AS COL_SEQ
  , NVL( PKT.IS_PK , 'N' )  AS IS_PK            --// PK여부 AS IS_PK : Y or N
--  , NVL( REL.CNT, '0' )     AS R_CNT          --// 관계타입 AS R_CNT( 2 = 1:1, 1 = 1:N, 0 = 관계없음 )
  , 0 AS R_CNT                                  --// 삭제
  , RTN.REF_TAB_N_COL       AS REF_TAB_N_COL    --// 관계테이블,컬럼명 AS REF_TAB_N_COL( TT_TEST_B,SEQ 즉 테이블,컬럼 형태 )[ ex.  ]
FROM ALL_TAB_COLUMNS COL
INNER JOIN ALL_TAB_COMMENTS TCM   -- 테이블 코멘트
  ON  TCM.TABLE_TYPE  = 'TABLE'
  AND TCM.OWNER       = COL.OWNER
  AND TCM.TABLE_NAME  = COL.TABLE_NAME
INNER JOIN ALL_COL_COMMENTS CCM   -- 컬럼 코멘트
  ON  CCM.OWNER       = COL.OWNER
  AND CCM.TABLE_NAME  = COL.TABLE_NAME
  AND CCM.COLUMN_NAME = COL.COLUMN_NAME
LEFT OUTER JOIN (
  SELECT 
    'Y' AS IS_PK
    , C.COLUMN_NAME
    , C.TABLE_NAME
  FROM ALL_CONS_COLUMNS C, All_CONSTRAINTS A
  WHERE A.CONSTRAINT_TYPE = 'P'            
    AND A.CONSTRAINT_NAME = C.CONSTRAINT_NAME
    AND A.TABLE_NAME      = C.TABLE_NAME        
) PKT --// PK여부
  ON  PKT.TABLE_NAME      = COL.TABLE_NAME
  AND PKT.COLUMN_NAME     = COL.COLUMN_NAME
/*
LEFT OUTER JOIN(
  SELECT COUNT( C.COLUMN_NAME ) AS CNT
    , MAX( C.CONSTRAINT_NAME )  AS CONSTRAINT_NAME
    , C.TABLE_NAME
    , C.COLUMN_NAME
  FROM ALL_CONS_COLUMNS C, All_CONSTRAINTS A
  WHERE ( A.CONSTRAINT_TYPE = 'P' OR A.CONSTRAINT_TYPE = 'R' )
    AND A.CONSTRAINT_NAME = C.CONSTRAINT_NAME
    AND A.TABLE_NAME      = C.TABLE_NAME        
  GROUP BY C.COLUMN_NAME, C.TABLE_NAME, C.COLUMN_NAME
) REL --// 관계 타입
  ON  REL.TABLE_NAME      = COL.TABLE_NAME
  AND REL.COLUMN_NAME     = COL.COLUMN_NAME
*/
LEFT OUTER JOIN(
  SELECT ( D.TABLE_NAME || ',' || D.COLUMN_NAME ) REF_TAB_N_COL
        , C.TABLE_NAME
        , C.COLUMN_NAME
  FROM ALL_CONS_COLUMNS C, All_CONSTRAINTS A, ALL_CONS_COLUMNS D
  WHERE C.CONSTRAINT_NAME = A.CONSTRAINT_NAME
    AND A.CONSTRAINT_TYPE = 'R'
    AND A.R_CONSTRAINT_NAME = D.CONSTRAINT_NAME
) RTN --// 관계 테이블,컬럼
  ON  RTN.TABLE_NAME      = COL.TABLE_NAME
  AND RTN.COLUMN_NAME     = COL.COLUMN_NAME
--WHERE COL.OWNER IN( 'CM', 'TT' )
ORDER BY COL.OWNER ASC, COL.TABLE_NAME ASC, COL.COLUMN_ID ASC
;